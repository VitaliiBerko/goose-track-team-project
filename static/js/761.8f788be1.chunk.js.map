{"version":3,"file":"static/js/761.8f788be1.chunk.js","mappings":"wHAQAA,EAAOC,QAAU,CACfC,WATiB,kBAUjBC,eATqB,mDAUrBC,YARA,+EASAC,eARqB,2BASrBC,WARiB,YASjBC,gBARsB,Y,mQCFXC,EAAOC,EAAAA,GAAAA,KAAH,4gBA2BJC,EAAYD,EAAAA,GAAAA,IAAH,uTAkBTE,EAAYF,EAAAA,GAAAA,KAAH,8DAEX,gBAAGG,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAb,OACPD,EAAW,MAAQC,EAAU,QAAU,6BADhC,IAIEC,EAAQL,EAAAA,GAAAA,MAAH,0MAYLM,EAAQN,EAAAA,GAAAA,MAAH,o2BAOZ,YAA4B,IAAzBG,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACb,OAAID,EACK,MAELC,EACK,QAEF,qBACR,IAiCmB,SAAAG,GAAK,OAAKA,EAAMJ,SAAW,MAAQ,MAA9B,IAIhBK,EAAcR,EAAAA,GAAAA,IAAH,0NAcXS,EAAWT,EAAAA,GAAAA,MAAH,6EAMRU,EAAaV,EAAAA,GAAAA,IAAH,8JAUVW,EAAWX,EAAAA,GAAAA,IAAH,qJASRY,EAAWZ,EAAAA,GAAAA,MAAH,sYAmBRa,EAAab,EAAAA,GAAAA,IAAH,qjBA6BVc,EAAUd,EAAAA,GAAAA,IAAH,kLAYPe,EAAWf,EAAAA,GAAAA,IAAH,yGAORgB,EAAShB,EAAAA,GAAAA,OAAH,s5BA0CNiB,EAAcjB,EAAAA,GAAAA,GAAH,2PAcXkB,GAAalB,EAAAA,GAAAA,EAAH,qOAaVmB,GAASnB,EAAAA,GAAAA,IAAH,sIAkBNoB,IATUpB,EAAAA,GAAAA,IAAH,yIASQqB,EAAAA,EAAAA,IAAH,moJAiOZC,IAAiBtB,EAAAA,EAAAA,IAAOuB,IAAPvB,CAAH,qxBAKrB,YAA4B,IAAzBG,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACb,OAAID,EACK,MAELC,EACK,QAEF,qBACR,IA8BmB,SAAAG,GAAK,OAAKA,EAAMJ,SAAW,MAAQ,MAA9B,IAIhBqB,GAAsBxB,EAAAA,GAAAA,IAAH,sbAkBnByB,GAAoBzB,EAAAA,GAAAA,IAAH,+C,6GCxiBjB0B,GAAW,WACtB,OAA0BC,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAaC,EAAAA,EAAAA,UACbC,GAAWC,EAAAA,GAAAA,MAEjB,GACEN,EAAAA,EAAAA,WAAS,GADX,eAAOO,EAAP,KAAoCC,EAApC,KAGMC,GAAOC,EAAAA,GAAAA,IAAYC,GAAAA,IACnBC,GAAQF,EAAAA,GAAAA,IAAYG,GAAAA,IACpBC,GAAQJ,EAAAA,GAAAA,IAAYK,GAAAA,KAAoB,GACxCC,GAAWN,EAAAA,GAAAA,IAAYO,GAAAA,KAAuB,GAC9CC,GAASR,EAAAA,GAAAA,IAAYS,GAAAA,IACrBC,GAAWV,EAAAA,GAAAA,IAAYW,GAAAA,KAAuBC,KAAKC,MACnDC,GAAYd,EAAAA,GAAAA,IAAYe,GAAAA,IAExBC,GAAgBC,EAAAA,GAAAA,SAAO,IAAIL,KAAKF,GAAW,cAG3CQ,EAAoB,CAAC,YAAa,aAAc,aAEtD,OACE,kCACGJ,IAAa,UAACK,GAAA,EAAD,KACd,UAAC,KAAD,CACEC,cAAe,CACbrB,KAAAA,EACAW,SAAUM,EACVd,MAAAA,EACAE,MAAAA,EACAE,SAAAA,GAEFe,iBAAkBC,GAAAA,GAAW,CAC3BvB,KAAMuB,GAAAA,KACHC,QAAQnE,GAAAA,WAAY,8CACpBoE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,oBACZxB,MAAOoB,GAAAA,KACJpB,MAAM,iBACNwB,SAAS,qBACZhB,SAAUY,GAAAA,KAAWI,SAAS,wBAAwBC,WACtDvB,MAAOkB,GAAAA,KACJC,QACCjE,GAAAA,YACA,qDAEDqE,WACHrB,SAAUgB,GAAAA,KACPC,QACChE,GAAAA,eACA,oDAEDkE,IAAI,GAAI,aACRE,WACHnB,OAAQc,GAAAA,KACLK,WACAC,KAAK,OAAQ,kBAAkB,SAAAC,GAC9B,IAAKA,EACH,OAAO,EAET,IAAMC,GAAkB,OAALD,QAAK,IAALA,OAAA,EAAAA,EAAOE,OA3CpB,QA+CN,OAHKD,GACHE,GAAAA,GAAAA,MAAY,kBAEPF,CACR,IACAF,KAAK,SAAU,sBAAsB,SAAAC,GACpC,IAAKA,EACH,OAAO,EAET,IAAMI,EAAoBf,EAAkBgB,SAASL,EAAMM,MAI3D,OAHKF,GACHD,GAAAA,GAAAA,MAAY,sBAEPC,CACR,MAELG,SAAQ,mCAAE,WAAOC,EAAP,iFAAiBC,EAAjB,EAAiBA,cAAjB,SACF3C,GAAS4C,EAAAA,GAAAA,IAASF,IAASG,SADzB,OAERF,GAAc,GAEdN,GAAAA,GAAAA,QAAc,+BAJN,2CAAF,wDAtDV,SA6DG,SAAAS,GAAM,OACL,WAAC/E,EAAD,CAAM0E,SAAUK,EAAOC,aAAvB,WACE,WAACvE,EAAD,YACE,WAACI,EAAD,CAAUoE,QAAQ,SAAlB,UACGpD,GACC,UAACjB,EAAD,CAAUsE,IAAI,SAASC,IAAKtD,EAAOuD,MAAM,KAAKC,OAAO,QAErD,gCACGvC,GACC,UAAClC,EAAD,CACEsE,IAAI,SACJC,IAAKrC,EACLsC,MAAM,KACNC,OAAO,QAGT,UAAC1E,EAAD,WACE,iBACE2E,UAAS,UAAKC,GAAAA,EAAL,IAAsB,2BAMzC,UAAC7E,EAAD,CACE8E,IAAKzD,EACL0C,KAAK,OACLgB,GAAG,SACHpD,KAAK,SACLqD,SAAU,SAAAC,GACR,IAAMC,EAAOD,EAAME,OAAOC,MAAM,GAChCf,EAAOgB,cAAc,SAAUH,GAC/B9D,EAASkE,IAAIC,gBAAgBL,GAC9B,EACDM,OAAQ1C,EAAkB2C,KAAK,SAEjC,UAACrF,EAAD,WACE,UAACC,EAAD,WACE,iBAAKuE,UAAS,UAAKC,GAAAA,EAAL,IAAsB,4BAK1C,UAACrE,EAAD,UAAcmB,KACd,UAAClB,GAAD,uBAGF,WAACjB,EAAD,YACE,WAACI,EAAD,CAAO2E,QAAQ,OAAf,WACE,UAAC9E,EAAD,CACEC,SAAU2E,EAAOqB,QAAQ/D,MAAQ0C,EAAOsB,OAAOhE,KAC/ChC,QAAS0E,EAAOqB,QAAQ/D,OAAS0C,EAAOsB,OAAOhE,KAFjD,wBAMA,UAAC9B,GAAD,QACEkF,GAAG,OACHpD,KAAK,OACLoC,KAAK,OACL6B,YAAY,OACZZ,SAAUX,EAAOwB,aACjBpC,MAAOY,EAAOJ,OAAOtC,KACrBmE,OAAQzB,EAAO0B,WACfrG,SAAU2E,EAAOqB,QAAQ/D,MAAQ0C,EAAOsB,OAAOhE,KAC/ChC,QAAS0E,EAAOqB,QAAQ/D,OAAS0C,EAAOsB,OAAOhE,MAC3C0C,EAAO2B,cAAc,WAE3B,UAACtF,GAAD,UAAS2D,EAAOqB,QAAQ/D,MAAQ0C,EAAOsB,OAAOhE,WAMhD,WAACX,GAAD,YACE,WAACpB,EAAD,CAAO2E,QAAQ,WAAf,WACE,UAAC9E,EAAD,CACEC,SAAU2E,EAAOsB,OAAOrD,SACxB3C,QACE0E,EAAOqB,QAAQpD,UAAYb,EAH/B,uBAQA,UAACV,GAAD,WACE,UAACT,EAAD,WACE,iBACEsE,UAAS,UAAKC,GAAAA,EAAL,IAAsB,kCAKvC,UAAClE,GAAD,KACA,UAACE,GAAD,CACEkE,GAAG,WACHpD,KAAK,WACLsE,SAAU,IAAIzD,KAAK6B,EAAOJ,OAAO3B,UACjC0C,SAAU,SAAAkB,GACR7B,EAAOgB,cAAc,WAAYa,GACjCxE,GAA+B,EAChC,EACDoE,OAAQzB,EAAO0B,WACfI,WAAW,aACXC,QAAS,IAAI5D,KACb6D,gBAAgB,aAChBC,cAAe,SAAAC,GAAG,OAAIA,EAAIC,OAAO,EAAf,EAClBC,iBAAkB,EAClB/G,SAAU2E,EAAOqB,QAAQpD,UAAY+B,EAAOsB,OAAOrD,SACnD3C,QACE0E,EAAOqB,QAAQpD,UAAYb,KAG/B,UAACf,GAAD,UACG2D,EAAOqB,QAAQpD,UAAY+B,EAAOsB,OAAOrD,eAO9C,WAAC1C,EAAD,CAAO2E,QAAQ,QAAf,WACE,UAAC9E,EAAD,CACEC,SAAU2E,EAAOqB,QAAQ5D,OAASuC,EAAOsB,OAAO7D,MAChDnC,QAAS0E,EAAOqB,QAAQ5D,QAAUuC,EAAOsB,OAAO7D,MAFlD,oBAMA,UAACjC,GAAD,QACEkF,GAAG,QACHpD,KAAK,QACLoC,KAAK,QACL6B,YAAY,QACZZ,SAAUX,EAAOwB,aACjBC,OAAQzB,EAAO0B,WACftC,MAAOY,EAAOJ,OAAOnC,MACrBpC,SAAU2E,EAAOqB,QAAQ5D,OAASuC,EAAOsB,OAAO7D,MAChDnC,QAAS0E,EAAOqB,QAAQ5D,QAAUuC,EAAOsB,OAAO7D,OAC5CuC,EAAO2B,cAAc,YAE3B,UAACtF,GAAD,UAAS2D,EAAOqB,QAAQ5D,OAASuC,EAAOsB,OAAO7D,YAKjD,WAAClC,EAAD,CAAO2E,QAAQ,QAAf,WACE,UAAC9E,EAAD,CACEC,SAAU2E,EAAOqB,QAAQ1D,OAASqC,EAAOsB,OAAO3D,MAChDrC,QAAS0E,EAAOqB,QAAQ1D,QAAUqC,EAAOsB,OAAO3D,MAFlD,oBAMA,UAACnC,GAAD,QACEkF,GAAG,QACHpD,KAAK,QACLoC,KAAK,QACLiB,SAAUX,EAAOwB,aACjBC,OAAQzB,EAAO0B,WACfH,YAAY,eACZnC,MAC0B,KAAxBY,EAAOJ,OAAOjC,OAAiBqC,EAAOJ,OAAOjC,MAEzCqC,EAAOJ,OAAOjC,MADd,GAGNtC,SAAU2E,EAAOqB,QAAQ1D,OAASqC,EAAOsB,OAAO3D,MAChDrC,QAAS0E,EAAOqB,QAAQ1D,QAAUqC,EAAOsB,OAAO3D,OAC5CqC,EAAO2B,cAAc,YAE3B,UAACtF,GAAD,UAAS2D,EAAOqB,QAAQ1D,OAASqC,EAAOsB,OAAO3D,YAKjD,WAACpC,EAAD,CAAO2E,QAAQ,WAAf,WACE,UAAC9E,EAAD,CACEC,SAAU2E,EAAOqB,QAAQxD,UAAYmC,EAAOsB,OAAOzD,SACnDvC,QAAS0E,EAAOqB,QAAQxD,WAAamC,EAAOsB,OAAOzD,SAFrD,uBAMA,UAACrC,GAAD,QACEkF,GAAG,WACHpD,KAAK,WACLoC,KAAK,OACLiB,SAAUX,EAAOwB,aACjBC,OAAQzB,EAAO0B,WACfH,YAAY,WACZnC,MAC6B,KAA3BY,EAAOJ,OAAO/B,UAAoBmC,EAAOJ,OAAO/B,SAE5CmC,EAAOJ,OAAO/B,SADd,GAGNxC,SAAU2E,EAAOqB,QAAQxD,UAAYmC,EAAOsB,OAAOzD,SACnDvC,QAAS0E,EAAOqB,QAAQxD,WAAamC,EAAOsB,OAAOzD,UAC/CmC,EAAO2B,cAAc,eAE3B,UAACtF,GAAD,UACG2D,EAAOqB,QAAQxD,UAAYmC,EAAOsB,OAAOzD,kBAOhD,UAAC3B,EAAD,CACEwD,KAAK,SACL2C,WAAYrC,EAAOsC,SAAWtC,EAAOuC,QAAUlE,EAFjD,4BA1MG,MAqNd,EC3VYmE,GAAYtH,EAAAA,GAAAA,IAAAA,OAAiB,SAAAO,GAAK,MAAK,CAClDgH,MAAO,CACLnC,OAAQ7E,EAAMiH,gBAF6B,GAAtBxH,CAAH,yOCGP,SAASyH,KACtB,IAGIC,EAAe,KAHFC,EAAAA,EAAAA,GAAS,mDAMxBD,EAAe,MALCC,EAAAA,EAAAA,GAAS,yBASzBD,EAAe,KAGjB,IACMF,GAD2BI,EAAAA,EAAAA,KAAzBxC,OAC8BsC,EACtC,OACE,iCACE,UAACJ,GAAD,CAAWE,eAAgBA,EAA3B,UACE,UAAC9F,GAAD,OAIP,C","sources":["constants/joiRegex.js","components/UserForm/UserForm.styled.jsx","components/UserForm/UserForm.jsx","pages/AccountPage/AccountPage.styled.js","pages/AccountPage/AccountPage.jsx"],"sourcesContent":["const NAME_REGEX = /^[a-zA-Z .'-]+$/;\nconst PASSWORD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{6,64}$/;\nconst PHONE_REGEX =\n  /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{0,4}[-.\\s]?\\d{0,9}$/;\nconst TELEGRAM_REGEX = /(?: ?^@)[a-z0-9_]{5,32}$/;\nconst YEAR_REGEX = /^\\d{4,4}$/;\nconst MONTH_DAY_REGEX = /^\\d{2,2}$/;\n\nmodule.exports = {\n  NAME_REGEX,\n  PASSWORD_REGEX,\n  PHONE_REGEX,\n  TELEGRAM_REGEX,\n  YEAR_REGEX,\n  MONTH_DAY_REGEX,\n};\n","import styled from 'styled-components';\nimport { createGlobalStyle } from 'styled-components';\nimport DatePicker from 'react-datepicker';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 40px;\n  width: 100%;\n  height: 100%;\n  margin-top: 51px;\n  padding: 40px 20px;\n  background-color: var(--primary-background-color);\n  border-radius: 16px;\n  position: relative;\n\n  @media (min-width: 768px) {\n    margin-top: 0;\n    padding: 40px;\n    position: static;\n  }\n\n  @media (min-width: 1280px) {\n    gap: 60px;\n    padding-top: 60px;\n    padding-bottom: 60px;\n  }\n`;\n\nexport const FlexInput = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 18px;\n\n  @media (min-width: 768px) {\n    gap: 24px;\n    flex-direction: row;\n    flex-wrap: wrap;\n    max-width: 732px;\n  }\n\n  @media (min-width: 876px) {\n    justify-content: space-between;\n  }\n`;\n\nexport const LabelSpan = styled.span`\n  margin-bottom: 8px;\n  color: ${({ hasError, success }) =>\n    hasError ? 'red' : success ? 'green' : 'var(--secondary-text-color)'};\n`;\n\nexport const Label = styled.label`\n  font-family: 'Inter', serif;\n  font-size: 12px;\n  line-height: 1.2;\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const Input = styled.input`\n  font-family: 'Inter', sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.3;\n  outline: none;\n  border: 1px solid\n    ${({ hasError, success }) => {\n      if (hasError) {\n        return 'red';\n      }\n      if (success) {\n        return 'green';\n      }\n      return 'var(--border-color)';\n    }};\n  border-radius: 8px;\n  height: 42px;\n  padding: 12px 12px 12px 14px;\n  box-sizing: border-box;\n  color: var(--primary-text-color);\n  background-color: var(--primary-background-color);\n\n  &::placeholder {\n    font-family: var(--primary-font);\n    font-size: 14px;\n    line-height: 1.29;\n    color: var(--auth-placeholder-color);\n  }\n\n  @media (max-width: 374px) {\n    max-width: 298px;\n  }\n\n  @media (min-width: 375px) {\n    width: 299px;\n  }\n\n  @media (min-width: 768px) {\n    width: 354px;\n    height: 46px;\n    padding: 14px 14px 14px 18px;\n    font-size: 16px;\n  }\n\n  transition: border var(--animation);\n  &:hover,\n  :focus {\n    border: 1px solid ${props => (props.hasError ? 'red' : 'gray')};\n  }\n`;\n\nexport const AvatarBlock = styled.div`\n  margin-top: -76px;\n\n  @media (min-width: 768px) {\n    margin-top: 0;\n  }\n\n  @media (min-width: 1280px) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nexport const InputAva = styled.input`\n  display: none;\n  width: 200px;\n  height: 150px;\n`;\n\nexport const DefaultSvg = styled.svg`\n  fill: var(--auth-bg-color);\n  width: 50%;\n  height: 50%;\n  position: relative;\n  top: 25%;\n  left: 25%;\n  object-fit: cover;\n`;\n\nexport const LabelImg = styled.img`\n  cursor: pointer;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  /* overflow: hidden; */\n  object-fit: cover;\n`;\n\nexport const LabelAva = styled.label`\n  position: relative;\n  border-radius: 50%;\n  border: 2px solid var(--accent-background-color);\n  width: 72px;\n  height: 72px;\n\n  display: block;\n  /* margin: -36px auto 0 auto; */\n  /* overflow: hidden; */\n  background-color: var(--avatar-background-color);\n  cursor: pointer;\n\n  @media (min-width: 768px) {\n    width: 124px;\n    height: 124px;\n  }\n`;\n\nexport const ButtonPlus = styled.div`\n  width: 14px;\n  height: 14px;\n  background-color: var(--accent-background-color);\n  border-radius: 50%;\n  color: var(--btn-text-color);\n\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  position: absolute;\n  bottom: -4px;\n  right: 15px;\n\n  @media (min-width: 768px) {\n    bottom: -6px;\n    right: 24px;\n    width: 24px;\n    height: 24px;\n  }\n  transition: background-color var(--animation);\n  &:hover,\n  :focus {\n    background-color: var(--hover-btn-background-color);\n  }\n`;\n\nexport const PlusSvg = styled.svg`\n  fill: currentColor;\n  stroke: currentColor;\n  width: 8px;\n  height: 8px;\n\n  @media (min-width: 768px) {\n    width: 18px;\n    height: 18px;\n  }\n`;\n\nexport const ArrowSvg = styled.svg`\n  stroke: currentColor;\n  fill: currentColor;\n  width: 12px;\n  height: 12px;\n`;\n\nexport const Button = styled.button`\n  font-family: 'Inter', sans-serif;\n  /* margin: 40px auto; */\n  display: block;\n  width: 100%;\n  max-width: 195px;\n\n  background-color: var(--accent-background-color);\n  border-radius: 16px;\n  color: var(--btn-text-color);\n  font-size: 14px;\n  line-height: 1.3;\n  text-align: center;\n  border: none;\n  padding: 14px;\n\n  &[disabled] {\n    background-color: #84828a;\n    opacity: 0.5;\n    pointer-events: none;\n  }\n\n  @media (min-width: 768px) {\n    padding: 15px;\n    // margin-top: 16px;\n    max-width: 262px;\n    max-height: 48px;\n    // margin-bottom: 40px;\n  }\n\n  @media (min-width: 1280px) {\n    /* margin: 64px auto 60px auto; */\n  }\n\n  transition: background-color var(--animation), box-shadow var(--animation);\n  &:hover,\n  :focus {\n    box-shadow: 4px 2px 16px rgba(136, 165, 191, 1);\n    background-color: var(--hover-btn-background-color);\n  }\n`;\n\nexport const TitleAvatar = styled.h3`\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1;\n  //color: #343434;\n  margin: 14px 0 0 0;\n  text-align: center;\n  color: var(--primary-text-color);\n\n  @media (min-width: 768px) {\n    margin: 20px 0 0 0;\n  }\n`;\n\nexport const TextAvatar = styled.p`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 18px;\n  color: var(--secondary-text-color);\n  margin-top: 4px;\n  text-align: center;\n\n  @media (min-width: 768px) {\n    margin-top: 8px;\n  }\n`;\n\nexport const Errors = styled.div`\n  color: red;\n  font-size: 12px;\n  height: 14px;\n  @media (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const Success = styled.div`\n  color: green;\n  font-size: 12px;\n  height: 14px;\n  @media (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const GlobalStyles = createGlobalStyle`\n  .react-datepicker__wrapper {\n    position: relative;\n  }\n\n  .react-datepicker {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-1%, 0%);\n    font-family: (var--primary-font);\n    padding: 12px;\n    border-radius: 16px;\n    background-color: var(--accent-background-color);\n\n    @media (min-width: 768px) {\n      padding: 18px;\n      transform: translate(-8%, 0%);\n    }\n  }\n\n  .react-datepicker__month-container {\n    float: inherit;\n    box-sizing: inherit;\n  }\n\n  .react-datepicker__header {\n    font-family: var(--primary-font);\n\n    text-align: center;\n    background-color: var(--accent-background-color);\n\n    border-top-right-radius: 16px;\n    border-top-left-radius: 16px;\n    position: relative;\n  }\n\n  .react-datepicker__day-names {\n    display: flex;\n    border-bottom: var(--border);\n    padding: 12px 0;\n    justify-content: space-between;\n\n    @media (min-width: 768px) {\n      padding: 16px 0;\n    }\n  }\n\n  .react-datepicker__header:not(.react-datepicker__header--has-time-select) {\n    border-top-right-radius: 16px;\n    border-bottom: 0px;\n    padding: 0;\n  }\n\n  .react-datepicker__current-month {\n    font-family: Inter, serif;\n    font-size: 20px;\n    font-weight: 600;\n    line-height: 24px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: var(--btn-text-color);\n\n    @media (min-width: 768px) {\n      font-size: 24px;\n      line-height: 28px;\n    }\n  }\n\n  .react-datepicker__day-name {\n    font-family: Inter, serif;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    margin: 0;\n    color: var(--btn-text-color);\n\n    @media (min-width: 768px) {\n      font-size: 18px;\n      line-height: 24px;\n    }\n  }\n\n  .react-datepicker__navigation {\n    margin-top: 7px;\n\n    @media (min-width: 768px) {\n      margin-top: 17px;\n    }\n  }\n\n  .react-datepicker__navigation--previous {\n    left: 7px;\n\n    @media (min-width: 768px) {\n      left: 17px;\n    }\n  }\n\n  .react-datepicker__navigation--next {\n    right: 7px;\n\n    @media (min-width: 768px) {\n      right: 17px;\n    }\n  }\n\n  .react-datepicker__navigation-icon::before {\n    border-color: var(--btn-text-color);\n    transition: border-color var(--animation);\n\n    @media (max-width: 767px) {\n      border-width: 2px 2px 0 0;\n      height: 9px;\n      width: 9px;\n    }\n\n    @media (min-width: 768px) {\n      margin-top: -2px;\n      height: 12px;\n      width: 12px;\n    }\n  }\n\n  .react-datepicker__navigation-icon::before:hover:focus {\n    border-color: var(--btn-text-color);\n  }\n\n  .react-datepicker__week {\n    display: flex;\n    gap: 7px;\n\n    color: var(--btn-text-color);\n    justify-content: space-between;\n  }\n\n  .react-datepicker__day {\n    font-family: Inter, serif;\n    font-size: 14px;\n    font-weight: 400;\n    letter-spacing: 0em;\n    text-align: center;\n    color: var(--btn-text-color);\n    width: 32px;\n    height: 32px;\n    margin: 0;\n    border-radius: 50%;\n    text-align: center;\n    line-height: 32px;\n    transition: color var(--animation), background-color var(--animation);\n\n    @media (min-width: 768px) {\n      font-size: 18px;\n      line-height: 24px;\n      width: 48px;\n      height: 48px;\n      line-height: 48px;\n    }\n  }\n\n  .react-datepicker__month {\n    display: flex;\n    gap: 7px;\n    flex-direction: column;\n    justify-content: space-between;\n    padding-top: 16px;\n    margin: 0;\n\n    @media (min-width: 768px) {\n      padding-top: 20px;\n    }\n  }\n\n  .react-datepicker__day--selected {\n    /* transform: scale(1); */\n    /* border-radius: 50%; */\n    background-color: var(--btn-text-color);\n    color: var(--accent-background-color);\n    font-size: 14px;\n\n    @media (min-width: 768px) {\n      font-size: 18px;\n    }\n  }\n\n  .react-datepicker__day--selected:hover {\n    border-radius: 50%;\n    background-color: white;\n  }\n\n  .react-datepicker__day:hover {\n    border-radius: 50%;\n    background-color: white;\n    color: var(--accent-background-color);\n  }\n\n  .react-datepicker__day--keyboard-selected {\n    border-radius: 50%;\n    background-color: white;\n    color: var(--accent-background-color);\n  }\n\n  .react-datepicker__day--weekend {\n    opacity: 50%;\n  }\n\n  .react-datepicker__day--outside-month {\n    color: var(--accent-background-color);\n    background-color: transparent;\n    pointer-events: none;\n    opacity: 0;\n  }\n\n  .react-datepicker__view-calendar-icon input {\n    padding: 6px 10px 5px 13px;\n  }\n\n  .react-datepicker__triangle {\n    visibility: hidden;\n  }\n\n`;\n\nexport const StyledDatePick = styled(DatePicker)`\n  position: relative;\n  width: 299px;\n  height: 42px;\n  border: 1px solid\n    ${({ hasError, success }) => {\n      if (hasError) {\n        return 'red';\n      }\n      if (success) {\n        return 'green';\n      }\n      return 'var(--border-color)';\n    }};\n  border-radius: 8px;\n  font-family: 'Inter', serif;\n  font-style: normal;\n\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.3;\n  outline: none;\n  padding: 12px 12px 12px 14px;\n  box-sizing: border-box;\n  color: var(--primary-text-color);\n  background-color: var(--primary-background-color);\n\n  &:focus-visible {\n    outline: none;\n    border: var(--border);\n    border-radius: 8px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 354px;\n    height: 46px;\n    font-size: 16px;\n    line-height: 1.12;\n    padding: 14px 14px 14px 18px;\n  }\n  transition: border var(--animation);\n  &:hover,\n  :focus {\n    border: 1px solid ${props => (props.hasError ? 'red' : 'gray')};\n  }\n`;\n\nexport const StyledIconContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  transform: translate(875%, 95%);\n  z-index: 1;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background-color: var(--primary-background-color);\n  /* box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); */\n  cursor: pointer;\n  @media screen and (min-width: 768px) {\n    transform: translate(1045%, 108%);\n  }\n`;\n\nexport const BirthdayContainer = styled.div`\n  position: relative;\n`;\n","import React, { useRef, useState } from 'react';\nimport { Formik } from 'formik';\nimport {\n  Form,\n  Input,\n  Label,\n  Button,\n  InputAva,\n  ButtonPlus,\n  LabelImg,\n  LabelAva,\n  TitleAvatar,\n  TextAvatar,\n  DefaultSvg,\n  FlexInput,\n  AvatarBlock,\n  Errors,\n  LabelSpan,\n  StyledDatePick,\n  StyledIconContainer,\n  PlusSvg,\n  BirthdayContainer,\n  ArrowSvg,\n} from './UserForm.styled';\nimport { GlobalStyles } from './UserForm.styled';\nimport { format } from 'date-fns';\n\nimport defaultAvatar from 'images/sprite.svg';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectIsLoading,\n  selectUserAvatarURL,\n  selectUserBirthday,\n  selectUserEmail,\n  selectUserName,\n  selectUserPhone,\n  selectUserTelegram,\n} from '../../redux/auth/auth.selectors';\n\nimport { userForm } from '../../redux/auth/auth.operations';\nimport * as Yup from 'yup';\n\nimport {\n  NAME_REGEX,\n  PHONE_REGEX,\n  TELEGRAM_REGEX,\n} from '../../constants/joiRegex';\nimport { toast } from 'react-toastify';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const UserForm = () => {\n  const [image, setImage] = useState();\n  const filePicker = useRef();\n  const dispatch = useDispatch();\n\n  const [birthdayValidationCompleted, setBirthdayValidationCompleted] =\n    useState(false);\n\n  const name = useSelector(selectUserName);\n  const email = useSelector(selectUserEmail);\n  const phone = useSelector(selectUserPhone) || '';\n  const telegram = useSelector(selectUserTelegram) || '';\n  const avatar = useSelector(selectUserAvatarURL);\n  const birthday = useSelector(selectUserBirthday) || Date.now();\n  const isLoading = useSelector(selectIsLoading);\n\n  const formattedDate = format(new Date(birthday), 'yyyy-MM-dd');\n\n  const FILE_SIZE = 2 * 1024 * 1024;\n  const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png'];\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <Formik\n        initialValues={{\n          name,\n          birthday: formattedDate,\n          email,\n          phone,\n          telegram,\n        }}\n        validationSchema={Yup.object({\n          name: Yup.string()\n            .matches(NAME_REGEX, 'Allow letters, apostrophe, dash and spaces')\n            .min(3, 'Too short!')\n            .max(16, 'Too long!')\n            .required('Name is required'),\n          email: Yup.string()\n            .email('Invalid email')\n            .required('Email is required'),\n          birthday: Yup.date().required('Birthday is required').nullable(),\n          phone: Yup.string()\n            .matches(\n              PHONE_REGEX,\n              'Allow digits, spaces, dashes and can start with +'\n            )\n            .nullable(),\n          telegram: Yup.string()\n            .matches(\n              TELEGRAM_REGEX,\n              'Start with @ and contain only [a-z], [0-9] and _'\n            )\n            .max(16, 'Too long!')\n            .nullable(),\n          avatar: Yup.mixed()\n            .nullable()\n            .test('size', 'File too large', value => {\n              if (!value) {\n                return true;\n              }\n              const isGoodSize = value?.size <= FILE_SIZE;\n              if (!isGoodSize) {\n                toast.error('File too large');\n              }\n              return isGoodSize;\n            })\n            .test('format', 'Unsupported Format', value => {\n              if (!value) {\n                return true;\n              }\n              const isSupportedFormat = SUPPORTED_FORMATS.includes(value.type);\n              if (!isSupportedFormat) {\n                toast.error('Unsupported format');\n              }\n              return isSupportedFormat;\n            }),\n        })}\n        onSubmit={async (values, { setSubmitting }) => {\n          await dispatch(userForm(values)).unwrap();\n          setSubmitting(false);\n\n          toast.success('Form submitted successfully');\n        }}\n      >\n        {formik => (\n          <Form onSubmit={formik.handleSubmit}>\n            <AvatarBlock>\n              <LabelAva htmlFor=\"avatar\">\n                {image ? (\n                  <LabelImg alt=\"Avatar\" src={image} width=\"48\" height=\"48\" />\n                ) : (\n                  <>\n                    {avatar ? (\n                      <LabelImg\n                        alt=\"Avatar\"\n                        src={avatar}\n                        width=\"48\"\n                        height=\"48\"\n                      />\n                    ) : (\n                      <DefaultSvg>\n                        <use\n                          xlinkHref={`${defaultAvatar}#${'profile-avatar-f'}`}\n                        />\n                      </DefaultSvg>\n                    )}\n                  </>\n                )}\n                <InputAva\n                  ref={filePicker}\n                  type=\"file\"\n                  id=\"avatar\"\n                  name=\"avatar\"\n                  onChange={event => {\n                    const file = event.target.files[0];\n                    formik.setFieldValue('avatar', file);\n                    setImage(URL.createObjectURL(file));\n                  }}\n                  accept={SUPPORTED_FORMATS.join(', ')}\n                />\n                <ButtonPlus>\n                  <PlusSvg>\n                    <use xlinkHref={`${defaultAvatar}#${'profile-plus-s'}`} />\n                  </PlusSvg>\n                </ButtonPlus>\n              </LabelAva>\n\n              <TitleAvatar>{name}</TitleAvatar>\n              <TextAvatar>User</TextAvatar>\n            </AvatarBlock>\n\n            <FlexInput>\n              <Label htmlFor=\"name\">\n                <LabelSpan\n                  hasError={formik.touched.name && formik.errors.name}\n                  success={formik.touched.name && !formik.errors.name}\n                >\n                  User Name\n                </LabelSpan>\n                <Input\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  placeholder=\"name\"\n                  onChange={formik.handleChange}\n                  value={formik.values.name}\n                  onBlur={formik.handleBlur}\n                  hasError={formik.touched.name && formik.errors.name}\n                  success={formik.touched.name && !formik.errors.name}\n                  {...formik.getFieldProps('name')}\n                />\n                <Errors>{formik.touched.name && formik.errors.name}</Errors>\n                {/* {formik.touched.name && !formik.errors.name && (\n                <Success>Valid name</Success>\n              )} */}\n              </Label>\n\n              <BirthdayContainer>\n                <Label htmlFor=\"birthday\">\n                  <LabelSpan\n                    hasError={formik.errors.birthday}\n                    success={\n                      formik.touched.birthday || birthdayValidationCompleted\n                    }\n                  >\n                    Birthday\n                  </LabelSpan>\n                  <StyledIconContainer>\n                    <ArrowSvg>\n                      <use\n                        xlinkHref={`${defaultAvatar}#${'user-chevron-down-sf'}`}\n                      />\n                    </ArrowSvg>\n                  </StyledIconContainer>\n                </Label>\n                <GlobalStyles />\n                <StyledDatePick\n                  id=\"birthday\"\n                  name=\"birthday\"\n                  selected={new Date(formik.values.birthday)}\n                  onChange={date => {\n                    formik.setFieldValue('birthday', date);\n                    setBirthdayValidationCompleted(true);\n                  }}\n                  onBlur={formik.handleBlur}\n                  dateFormat=\"dd-MM-yyyy\"\n                  maxDate={new Date()}\n                  placeholderText=\"dd-MM-yyyy\"\n                  formatWeekDay={day => day.charAt(0)}\n                  calendarStartDay={1}\n                  hasError={formik.touched.birthday && formik.errors.birthday}\n                  success={\n                    formik.touched.birthday || birthdayValidationCompleted\n                  }\n                />\n                <Errors>\n                  {formik.touched.birthday && formik.errors.birthday}\n                </Errors>\n                {/* {formik.touched.birthday && !formik.errors.birthday && (\n                <Success>Valid birthday</Success>\n              )} */}\n              </BirthdayContainer>\n\n              <Label htmlFor=\"email\">\n                <LabelSpan\n                  hasError={formik.touched.email && formik.errors.email}\n                  success={formik.touched.email && !formik.errors.email}\n                >\n                  Email\n                </LabelSpan>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"email\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.email}\n                  hasError={formik.touched.email && formik.errors.email}\n                  success={formik.touched.email && !formik.errors.email}\n                  {...formik.getFieldProps('email')}\n                />\n                <Errors>{formik.touched.email && formik.errors.email}</Errors>\n                {/* {formik.touched.email && !formik.errors.email && (\n                <Success>Valid email</Success>\n              )} */}\n              </Label>\n              <Label htmlFor=\"phone\">\n                <LabelSpan\n                  hasError={formik.touched.phone && formik.errors.phone}\n                  success={formik.touched.phone && !formik.errors.phone}\n                >\n                  Phone\n                </LabelSpan>\n                <Input\n                  id=\"phone\"\n                  name=\"phone\"\n                  type=\"phone\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  placeholder=\"phone number\"\n                  value={\n                    formik.values.phone === '' || !formik.values.phone\n                      ? ''\n                      : formik.values.phone\n                  }\n                  hasError={formik.touched.phone && formik.errors.phone}\n                  success={formik.touched.phone && !formik.errors.phone}\n                  {...formik.getFieldProps('phone')}\n                />\n                <Errors>{formik.touched.phone && formik.errors.phone}</Errors>\n                {/* {formik.touched.phone && !formik.errors.phone && (\n                <Success>Valid phone</Success>\n              )} */}\n              </Label>\n              <Label htmlFor=\"telegram\">\n                <LabelSpan\n                  hasError={formik.touched.telegram && formik.errors.telegram}\n                  success={formik.touched.telegram && !formik.errors.telegram}\n                >\n                  Telegram\n                </LabelSpan>\n                <Input\n                  id=\"telegram\"\n                  name=\"telegram\"\n                  type=\"text\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  placeholder=\"telegram\"\n                  value={\n                    formik.values.telegram === '' || !formik.values.telegram\n                      ? ''\n                      : formik.values.telegram\n                  }\n                  hasError={formik.touched.telegram && formik.errors.telegram}\n                  success={formik.touched.telegram && !formik.errors.telegram}\n                  {...formik.getFieldProps('telegram')}\n                />\n                <Errors>\n                  {formik.touched.telegram && formik.errors.telegram}\n                </Errors>\n                {/* {formik.touched.telegram && !formik.errors.telegram && (\n                <Success>Valid telegram</Success>\n              )} */}\n              </Label>\n            </FlexInput>\n            <Button\n              type=\"submit\"\n              disabled={!(formik.isValid && formik.dirty) || isLoading}\n            >\n              Save changes\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\nexport const Container = styled.div.attrs(props => ({\n  style: {\n    height: props.userFormHeight,\n  },\n}))`\n  min-height: 734px;\n\n  @media (min-width: 768px) {\n    min-height: 917px;\n  }\n\n  @media (min-width: 876px) {\n    min-height: 698px;\n  }\n\n  @media (min-width: 1280px) {\n    min-height: 778px;\n  }\n`;\n","import { useMedia, useWindowSize } from 'react-use';\nimport { UserForm } from '../../components/UserForm/UserForm';\nimport { Container } from './AccountPage.styled';\n\nexport default function AccountPage() {\n  const isTablet = useMedia('(min-width: 768px) and (max-width: 1279.98px)');\n  const isDesktop = useMedia('(min-width: 1280px)');\n\n  let headerHeight = 159;\n\n  if (isTablet) {\n    headerHeight = 134;\n  }\n\n  if (isDesktop) {\n    headerHeight = 164;\n  }\n\n  const { height: windowHeight } = useWindowSize();\n  const userFormHeight = windowHeight - headerHeight;\n  return (\n    <>\n      <Container userFormHeight={userFormHeight}>\n        <UserForm />\n      </Container>\n    </>\n  );\n}\n"],"names":["module","exports","NAME_REGEX","PASSWORD_REGEX","PHONE_REGEX","TELEGRAM_REGEX","YEAR_REGEX","MONTH_DAY_REGEX","Form","styled","FlexInput","LabelSpan","hasError","success","Label","Input","props","AvatarBlock","InputAva","DefaultSvg","LabelImg","LabelAva","ButtonPlus","PlusSvg","ArrowSvg","Button","TitleAvatar","TextAvatar","Errors","GlobalStyles","createGlobalStyle","StyledDatePick","DatePicker","StyledIconContainer","BirthdayContainer","UserForm","useState","image","setImage","filePicker","useRef","dispatch","useDispatch","birthdayValidationCompleted","setBirthdayValidationCompleted","name","useSelector","selectUserName","email","selectUserEmail","phone","selectUserPhone","telegram","selectUserTelegram","avatar","selectUserAvatarURL","birthday","selectUserBirthday","Date","now","isLoading","selectIsLoading","formattedDate","format","SUPPORTED_FORMATS","Loader","initialValues","validationSchema","Yup","matches","min","max","required","nullable","test","value","isGoodSize","size","toast","isSupportedFormat","includes","type","onSubmit","values","setSubmitting","userForm","unwrap","formik","handleSubmit","htmlFor","alt","src","width","height","xlinkHref","defaultAvatar","ref","id","onChange","event","file","target","files","setFieldValue","URL","createObjectURL","accept","join","touched","errors","placeholder","handleChange","onBlur","handleBlur","getFieldProps","selected","date","dateFormat","maxDate","placeholderText","formatWeekDay","day","charAt","calendarStartDay","disabled","isValid","dirty","Container","style","userFormHeight","AccountPage","headerHeight","useMedia","useWindowSize"],"sourceRoot":""}